<?php

namespace App\Libraries\mds\service;

use App\Libraries\mds\dao\OrderDao;
use App\Libraries\mds\dao\RefundDao;
use App\Libraries\mds\model\command\OrderCommand;
use App\Libraries\mds\model\command\RefundCommand;
use CodeIgniter\Test\CIUnitTestCase;
use InvalidArgumentException;
use PDO;

require_once 'tests/TestDataSettingFunction.php';

class RefundServiceTest extends CIUnitTestCase
{
    private OrderService $orderService;
    private RefundService $refundService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $pdo = new PDO('sqlite::memory:');
        setMemorySqliteTestData($pdo);

        $orderDao = OrderDao::getInstance();
        $orderDao->setPdo($pdo);
        $this->orderService = OrderService::getInstance();
        $this->orderService->setOrderDao($orderDao);

        $refundDao = RefundDao::getInstance();
        $refundDao->setPdo($pdo);
        $this->refundService = RefundService::getInstance();
        $this->refundService->setRefundDao($refundDao);
        $this->refundService->setOrderService($this->orderService);
    }

    /**
     * 반품비 예상 금액 조회 테스트
     * 필수 파라미터 없는 경우 -> InvalidArgumentException 발생
     */
    public function testGetExpectationRefundByNoneParameters()
    {
        $this->expectException(InvalidArgumentException::class);

        $refundCommand = new RefundCommand();

        $expectationRefund = $this->refundService->getExpectationRefund($refundCommand);
    }

    /**
     * 반품비 예상 금액 조회 테스트(교환)
     */
    public function testGetExpectationRefundByExchange()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 1;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        $expectationRefund = $this->refundService->getExpectationRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(10000, $expectationRefund['refundPrice']);
    }

    /**
     * 반품비 예상 금액 조회 테스트(환불)
     */
    public function testGetExpectationRefundByReturn()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 2;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        $expectationRefund = $this->refundService->getExpectationRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(6000, $expectationRefund['refundPrice']);
    }

    /**
     * 반품비 예상 금액 조회 테스트
     * 없는 주문 조회
     */
    public function testGetExpectationRefundByNoneOrderSeq()
    {
        $memberSeq = 1;
        $orderSeq = 999;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 1;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        $expectationRefund = $this->refundService->getExpectationRefund($refundCommand);

        $this->assertFalse($expectationRefund['isRefundAvailable']);
        $this->assertEquals(0, $expectationRefund['refundPrice']);
    }

    /**
     * 교환 접수 테스트
     */
    public function testInsertRefundByExchange()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 1;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        // 교환 접수
        $expectationRefund = $this->refundService->insertRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(10000, $expectationRefund['refundPrice']);

        $orderCommand = new OrderCommand();
        $orderCommand->memberSeq = $memberSeq;
        $orderCommand->orderSeq = $orderSeq;

        // 환불정보 조회하여, 정상입력 확인
        $order = $this->orderService->selectOrders($orderCommand);
        $refundList = current($order[$orderSeq]['refundList']);
        $this->assertEquals($refundMethodSeq, $refundList['refundMethod']);
        $this->assertEquals($expectationRefund['refundPrice'], $refundList['refundPrice']);
    }

    /**
     * 교환 접수 테스트(이미 교환접수된 주문상품 다시 접수하는 경우)
     */
    public function testInsertRefundByExchangeDuplicate()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 1;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        // 교환 접수
        $expectationRefund = $this->refundService->insertRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(10000, $expectationRefund['refundPrice']);

        // 동일 주문상품번호 교환 접수 중복 요청
        $refund = $this->refundService->insertRefund($refundCommand);

        $this->assertFalse($refund['isRefundAvailable']);
        $this->assertEquals(0, $refund['refundPrice']);
    }

    /**
     * 환불 접수 테스트
     */
    public function testInsertRefundByReturn()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 2, 3];
        $refundMethodSeq = 2;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        // 환불 접수
        $expectationRefund = $this->refundService->insertRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(9000, $expectationRefund['refundPrice']);

        $orderCommand = new OrderCommand();
        $orderCommand->memberSeq = $memberSeq;
        $orderCommand->orderSeq = $orderSeq;

        // 환불정보 조회하여, 정상입력 확인
        $order = $this->orderService->selectOrders($orderCommand);
        $refundList = current($order[$orderSeq]['refundList']);
        $this->assertEquals($refundMethodSeq, $refundList['refundMethod']);
        $this->assertEquals(9000, $refundList['refundPrice']);
        $this->assertEquals($expectationRefund['refundPrice'], $refundList['refundPrice']);
    }

    /**
     * 환불 접수 테스트(이미 환불접수된 주문상품 다시 접수하는 경우)
     */
    public function testInsertRefundByReturnDuplicate()
    {
        $memberSeq = 1;
        $orderSeq = 1;
        $orderProductSeqList = [1, 3];
        $refundMethodSeq = 2;

        $refundCommand = new RefundCommand();
        $refundCommand->memberSeq = $memberSeq;
        $refundCommand->orderSeq = $orderSeq;
        $refundCommand->orderProductSeqList = $orderProductSeqList;
        $refundCommand->refundMethodSeq = $refundMethodSeq;

        // 교환 접수
        $expectationRefund = $this->refundService->insertRefund($refundCommand);

        $this->assertTrue($expectationRefund['isRefundAvailable']);
        $this->assertEquals(6000, $expectationRefund['refundPrice']);

        // 동일 주문상품번호 교환 접수 중복 요청
        $expectationRefund = $this->refundService->insertRefund($refundCommand);

        $this->assertFalse($expectationRefund['isRefundAvailable']);
        $this->assertEquals(0, $expectationRefund['refundPrice']);
    }
}
